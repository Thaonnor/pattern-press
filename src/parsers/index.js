'use strict';

const { RecipeDispatcher, loadSegments, processSegments } = require('./dispatcher');
const jsonCraftingHandler = require('./handlers/jsonCraftingHandler');
const shapedCraftingHandler = require('./handlers/shapedCraftingHandler');
const shapelessCraftingHandler = require('./handlers/shapelessCraftingHandler');
const blastFurnaceHandler = require('./handlers/blastFurnaceHandler');
const campfireHandler = require('./handlers/campfireHandler');
const smeltingHandler = require('./handlers/smeltingHandler');
const smokingHandler = require('./handlers/smokingHandler');
const smithingHandler = require('./handlers/smithingHandler');
const cuttingHandler = require('./handlers/cuttingHandler');
const cookingHandler = require('./handlers/cookingHandler');

// Mekanism mod handlers
const mekanismHandlers = require('./mods/mekanism');

/**
 * @typedef {Object} SegmentProcessingSummary
 * @property {number} total Total number of segments that were processed.
 * @property {number} parsed Number of segments that were successfully parsed into recipes.
 * @property {number} errors Number of segments that failed during parsing with errors.
 * @property {number} unhandled Number of segments that no handler could process.
 * @property {Object[]} results Complete array of processed segment results with dispatch metadata.
 */

/**
 * Creates a preconfigured RecipeDispatcher with all default recipe format handlers registered.
 *
 * The returned dispatcher includes handlers for:
 * - JSON-based recipes (addJsonRecipe calls)
 * - Shaped crafting table recipes (addShaped calls)
 * - Shapeless crafting table recipes (addShapeless calls)
 * - Blast furnace recipes (blastFurnace.addRecipe calls)
 * - Campfire cooking recipes (campfire.addRecipe calls)
 * - Smelting recipes (furnace.addRecipe calls)
 * - Smoking recipes (smoker.addRecipe calls)
 * - Smithing recipes (smithing.addTransformRecipe and smithing.addTrimRecipe calls)
 * - Cutting recipes (farmersdelight cutting board recipes)
 * - Cooking recipes (farmersdelight cooking pot recipes)
 * - Mekanism recipes (chemical conversion, centrifuging, activating)
 *
 * @param {{ logger?: Console }} [options] Configuration options for the dispatcher.
 * @param {Console} [options.logger=console] Logger instance for handler warnings and errors.
 * @returns {RecipeDispatcher} Configured dispatcher ready for segment processing.
 */
function createDefaultDispatcher({ logger = console } = {}) {
    const dispatcher = new RecipeDispatcher({ logger });
    dispatcher.registerHandler(jsonCraftingHandler);
    dispatcher.registerHandler(shapedCraftingHandler);
    dispatcher.registerHandler(shapelessCraftingHandler);
    dispatcher.registerHandler(blastFurnaceHandler);
    dispatcher.registerHandler(campfireHandler);
    dispatcher.registerHandler(smeltingHandler);
    dispatcher.registerHandler(smokingHandler);
    dispatcher.registerHandler(smithingHandler);
    dispatcher.registerHandler(cuttingHandler);
    dispatcher.registerHandler(cookingHandler);

    // Register all Mekanism handlers
    mekanismHandlers.getAllHandlers().forEach(handler => {
        dispatcher.registerHandler(handler);
    });
    return dispatcher;
}

/**
 * Processes a segment JSON file and returns aggregated parsing statistics.
 *
 * This function loads segments from a JSON file (typically generated by the log segmenter),
 * processes each segment through the parsing pipeline, and returns both detailed results
 * and summary statistics suitable for CLI reporting or further analysis.
 *
 * @param {string} filePath Absolute or relative path to the segments JSON file.
 * @param {Object} [options] Processing options and overrides.
 * @param {RecipeDispatcher} [options.dispatcher] Custom dispatcher to use instead of the default.
 * @param {Console} [options.logger] Logger instance passed to the default dispatcher if created.
 * @returns {Promise<SegmentProcessingSummary>} Processing results with counts and detailed outcomes.
 * @throws {Error} When the segment file cannot be loaded or parsed, or processing fails.
 */
async function processSegmentFile(filePath, options = {}) {
    const segments = loadSegments(filePath);
    const dispatcher = options.dispatcher || createDefaultDispatcher(options);
    const results = await processSegments(dispatcher, segments);

    return {
        total: segments.length,
        parsed: results.filter((entry) => entry.dispatch.status === 'parsed').length,
        errors: results.filter((entry) => entry.dispatch.status === 'error').length,
        unhandled: results.filter((entry) => entry.dispatch.status === 'unhandled').length,
        results
    };
}

module.exports = {
    createDefaultDispatcher,
    processSegmentFile,
    processSegments
};
